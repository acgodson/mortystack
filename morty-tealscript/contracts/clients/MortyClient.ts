/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "subscribe(byte[32])uint64[2]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createRecord(byte[32],string,asset)byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "makePayment(asset,uint64,string,byte[32],string,address,address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimPayment(uint64,asset,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimReceipt(uint64,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getLastSubscription(byte[32])uint64[2]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getReceipt(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVault(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getRecordReference(uint64,uint64,string)byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getMyTxnIDs(byte[32])uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getTxnInfo(uint64)(string,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "TxnIDx": {
          "type": "uint64",
          "key": "TxnIDx"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": ""
  },
  "contract": {
    "name": "Morty",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "desc": "Initializes the transaction ID counter when creating the application.",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "subscribe",
        "args": [
          {
            "name": "account",
            "type": "byte[32]",
            "desc": "Public key of the account subscribing."
          }
        ],
        "desc": "Allows an account to subscribe, setting a subscription period and charging money after the free 1 month period.",
        "returns": {
          "type": "uint64[2]",
          "desc": "The subscription period [startDate, endDate]."
        }
      },
      {
        "name": "createRecord",
        "args": [
          {
            "name": "account",
            "type": "byte[32]",
            "desc": "Public key of the seller's account."
          },
          {
            "name": "ref",
            "type": "string",
            "desc": "Reference string."
          },
          {
            "name": "asset",
            "type": "asset",
            "desc": "Asset associated with the seller's record."
          }
        ],
        "desc": "Creates a unique seller record based on the account, reference, and asset information.",
        "returns": {
          "type": "byte[32]",
          "desc": "The unique reference for the seller's record."
        }
      },
      {
        "name": "makePayment",
        "args": [
          {
            "name": "vault",
            "type": "asset",
            "desc": "Asset used for the payment."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of the payment."
          },
          {
            "name": "description",
            "type": "string",
            "desc": "Description of the payment."
          },
          {
            "name": "sub",
            "type": "byte[32]",
            "desc": "Public key of the subscriber."
          },
          {
            "name": "sellerRef",
            "type": "string",
            "desc": "Reference string associated with the seller's record."
          },
          {
            "name": "from",
            "type": "address",
            "desc": "Sender's address."
          },
          {
            "name": "to",
            "type": "address",
            "desc": "Receiver's address."
          }
        ],
        "desc": "Processes a payment transaction, creating a new transaction record and associated metadata.",
        "returns": {
          "type": "uint64",
          "desc": "The receipt (asset) for the payment transaction."
        }
      },
      {
        "name": "claimPayment",
        "args": [
          {
            "name": "txID",
            "type": "uint64",
            "desc": "Transaction ID of the payment transaction."
          },
          {
            "name": "payASA",
            "type": "asset",
            "desc": "Asset associated with the payment."
          },
          {
            "name": "txn",
            "type": "pay",
            "desc": "Payment transaction details."
          }
        ],
        "desc": "Handles the payment claim process, verifying the seller's signature and transferring assets to the seller.",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "claimReceipt",
        "args": [
          {
            "name": "txID",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "receipt",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getLastSubscription",
        "args": [
          {
            "name": "acc",
            "type": "byte[32]",
            "desc": "Public key of the account."
          }
        ],
        "desc": "Retrieves the current subscription period for a given account.",
        "returns": {
          "type": "uint64[2]",
          "desc": "The subscription period [startDate, endDate]."
        }
      },
      {
        "name": "getReceipt",
        "args": [
          {
            "name": "txID",
            "type": "uint64",
            "desc": "Transaction ID."
          }
        ],
        "desc": "Retrieves the receipt (asset) associated with a given transaction ID.",
        "returns": {
          "type": "uint64",
          "desc": "The receipt (asset) for the specified transaction."
        }
      },
      {
        "name": "getVault",
        "args": [
          {
            "name": "txID",
            "type": "uint64",
            "desc": "Transaction ID."
          }
        ],
        "desc": "Retrieves the vault (asset) associated with a given transaction ID.",
        "returns": {
          "type": "uint64",
          "desc": "The vault (asset) for the specified transaction."
        }
      },
      {
        "name": "getRecordReference",
        "args": [
          {
            "name": "start",
            "type": "uint64",
            "desc": "Start timestamp."
          },
          {
            "name": "end",
            "type": "uint64",
            "desc": "End timestamp."
          },
          {
            "name": "ref",
            "type": "string",
            "desc": "Reference string."
          }
        ],
        "desc": "Generates a unique record reference based on start and end timestamps and a reference string.",
        "returns": {
          "type": "byte[32]",
          "desc": "The unique reference for the seller's record."
        }
      },
      {
        "name": "getMyTxnIDs",
        "args": [
          {
            "name": "reference",
            "type": "byte[32]",
            "desc": "Unique reference for the seller's record."
          }
        ],
        "desc": "Retrieves transaction IDs associated with a specific record reference.",
        "returns": {
          "type": "uint64[]",
          "desc": "An array of transaction IDs associated with the specified record reference."
        }
      },
      {
        "name": "getTxnInfo",
        "args": [
          {
            "name": "txID",
            "type": "uint64",
            "desc": "Transaction ID."
          }
        ],
        "desc": "Retrieves transaction information including description, status, and round index for a given transaction ID.",
        "returns": {
          "type": "(string,uint64,uint64)",
          "desc": "Transaction information object{description, status, rIdx}."
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Morty smart contract.
 */
export type Morty = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'subscribe(byte[32])uint64[2]' | 'subscribe', {
      argsObj: {
        /**
         * Public key of the account subscribing.
         */
        account: Uint8Array
      }
      argsTuple: [account: Uint8Array]
      /**
       * The subscription period [startDate, endDate].
       */
      returns: [bigint, bigint]
    }>
    & Record<'createRecord(byte[32],string,asset)byte[32]' | 'createRecord', {
      argsObj: {
        /**
         * Public key of the seller's account.
         */
        account: Uint8Array
        /**
         * Reference string.
         */
        ref: string
        /**
         * Asset associated with the seller's record.
         */
        asset: number | bigint
      }
      argsTuple: [account: Uint8Array, ref: string, asset: number | bigint]
      /**
       * The unique reference for the seller's record.
       */
      returns: Uint8Array
    }>
    & Record<'makePayment(asset,uint64,string,byte[32],string,address,address)uint64' | 'makePayment', {
      argsObj: {
        /**
         * Asset used for the payment.
         */
        vault: number | bigint
        /**
         * Amount of the payment.
         */
        amount: bigint | number
        /**
         * Description of the payment.
         */
        description: string
        /**
         * Public key of the subscriber.
         */
        sub: Uint8Array
        /**
         * Reference string associated with the seller's record.
         */
        sellerRef: string
        /**
         * Sender's address.
         */
        from: string
        /**
         * Receiver's address.
         */
        to: string
      }
      argsTuple: [vault: number | bigint, amount: bigint | number, description: string, sub: Uint8Array, sellerRef: string, from: string, to: string]
      /**
       * The receipt (asset) for the payment transaction.
       */
      returns: bigint
    }>
    & Record<'claimPayment(uint64,asset,pay)void' | 'claimPayment', {
      argsObj: {
        /**
         * Transaction ID of the payment transaction.
         */
        txID: bigint | number
        /**
         * Asset associated with the payment.
         */
        payASA: number | bigint
        /**
         * Payment transaction details.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [txID: bigint | number, payASA: number | bigint, txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'claimReceipt(uint64,asset)void' | 'claimReceipt', {
      argsObj: {
        txID: bigint | number
        receipt: number | bigint
      }
      argsTuple: [txID: bigint | number, receipt: number | bigint]
      returns: void
    }>
    & Record<'getLastSubscription(byte[32])uint64[2]' | 'getLastSubscription', {
      argsObj: {
        /**
         * Public key of the account.
         */
        acc: Uint8Array
      }
      argsTuple: [acc: Uint8Array]
      /**
       * The subscription period [startDate, endDate].
       */
      returns: [bigint, bigint]
    }>
    & Record<'getReceipt(uint64)uint64' | 'getReceipt', {
      argsObj: {
        /**
         * Transaction ID.
         */
        txID: bigint | number
      }
      argsTuple: [txID: bigint | number]
      /**
       * The receipt (asset) for the specified transaction.
       */
      returns: bigint
    }>
    & Record<'getVault(uint64)uint64' | 'getVault', {
      argsObj: {
        /**
         * Transaction ID.
         */
        txID: bigint | number
      }
      argsTuple: [txID: bigint | number]
      /**
       * The vault (asset) for the specified transaction.
       */
      returns: bigint
    }>
    & Record<'getRecordReference(uint64,uint64,string)byte[32]' | 'getRecordReference', {
      argsObj: {
        /**
         * Start timestamp.
         */
        start: bigint | number
        /**
         * End timestamp.
         */
        end: bigint | number
        /**
         * Reference string.
         */
        ref: string
      }
      argsTuple: [start: bigint | number, end: bigint | number, ref: string]
      /**
       * The unique reference for the seller's record.
       */
      returns: Uint8Array
    }>
    & Record<'getMyTxnIDs(byte[32])uint64[]' | 'getMyTxnIDs', {
      argsObj: {
        /**
         * Unique reference for the seller's record.
         */
        reference: Uint8Array
      }
      argsTuple: [reference: Uint8Array]
      /**
       * An array of transaction IDs associated with the specified record reference.
       */
      returns: bigint[]
    }>
    & Record<'getTxnInfo(uint64)(string,uint64,uint64)' | 'getTxnInfo', {
      argsObj: {
        /**
         * Transaction ID.
         */
        txID: bigint | number
      }
      argsTuple: [txID: bigint | number]
      /**
       * Transaction information object{description, status, rIdx}.
       */
      returns: [string, bigint, bigint]
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'TxnIDx'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type MortySig = keyof Morty['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends MortySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Morty smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends MortySig> = Morty['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Morty smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MortySig> = Morty['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type MortyCreateCalls = (typeof MortyCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type MortyCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type MortyDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: MortyCreateCalls) => MortyCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class MortyCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Morty smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the subscribe(byte[32])uint64[2] ABI method
   *
   * Allows an account to subscribe, setting a subscription period and charging money after the free 1 month period.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static subscribe(args: MethodArgs<'subscribe(byte[32])uint64[2]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'subscribe(byte[32])uint64[2]' as const,
      methodArgs: Array.isArray(args) ? args : [args.account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createRecord(byte[32],string,asset)byte[32] ABI method
   *
   * Creates a unique seller record based on the account, reference, and asset information.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createRecord(args: MethodArgs<'createRecord(byte[32],string,asset)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createRecord(byte[32],string,asset)byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.account, args.ref, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the makePayment(asset,uint64,string,byte[32],string,address,address)uint64 ABI method
   *
   * Processes a payment transaction, creating a new transaction record and associated metadata.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static makePayment(args: MethodArgs<'makePayment(asset,uint64,string,byte[32],string,address,address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'makePayment(asset,uint64,string,byte[32],string,address,address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.vault, args.amount, args.description, args.sub, args.sellerRef, args.from, args.to],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claimPayment(uint64,asset,pay)void ABI method
   *
   * Handles the payment claim process, verifying the seller's signature and transferring assets to the seller.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimPayment(args: MethodArgs<'claimPayment(uint64,asset,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claimPayment(uint64,asset,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txID, args.payASA, args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claimReceipt(uint64,asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimReceipt(args: MethodArgs<'claimReceipt(uint64,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claimReceipt(uint64,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txID, args.receipt],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getLastSubscription(byte[32])uint64[2] ABI method
   *
   * Retrieves the current subscription period for a given account.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getLastSubscription(args: MethodArgs<'getLastSubscription(byte[32])uint64[2]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getLastSubscription(byte[32])uint64[2]' as const,
      methodArgs: Array.isArray(args) ? args : [args.acc],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getReceipt(uint64)uint64 ABI method
   *
   * Retrieves the receipt (asset) associated with a given transaction ID.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getReceipt(args: MethodArgs<'getReceipt(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getReceipt(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.txID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getVault(uint64)uint64 ABI method
   *
   * Retrieves the vault (asset) associated with a given transaction ID.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVault(args: MethodArgs<'getVault(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getVault(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.txID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getRecordReference(uint64,uint64,string)byte[32] ABI method
   *
   * Generates a unique record reference based on start and end timestamps and a reference string.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getRecordReference(args: MethodArgs<'getRecordReference(uint64,uint64,string)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getRecordReference(uint64,uint64,string)byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.start, args.end, args.ref],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getMyTxnIDs(byte[32])uint64[] ABI method
   *
   * Retrieves transaction IDs associated with a specific record reference.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getMyTxnIDs(args: MethodArgs<'getMyTxnIDs(byte[32])uint64[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getMyTxnIDs(byte[32])uint64[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.reference],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getTxnInfo(uint64)(string,uint64,uint64) ABI method
   *
   * Retrieves transaction information including description, status, and round index for a given transaction ID.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getTxnInfo(args: MethodArgs<'getTxnInfo(uint64)(string,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getTxnInfo(uint64)(string,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txID],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Morty smart contract
 */
export class MortyClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `MortyClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Morty['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Morty smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: MortyDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(MortyCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Morty smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(MortyCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Morty smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the subscribe(byte[32])uint64[2] ABI method.
   *
   * Allows an account to subscribe, setting a subscription period and charging money after the free 1 month period.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The subscription period [startDate, endDate].
   */
  public subscribe(args: MethodArgs<'subscribe(byte[32])uint64[2]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MortyCallFactory.subscribe(args, params))
  }

  /**
   * Calls the createRecord(byte[32],string,asset)byte[32] ABI method.
   *
   * Creates a unique seller record based on the account, reference, and asset information.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The unique reference for the seller's record.
   */
  public createRecord(args: MethodArgs<'createRecord(byte[32],string,asset)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MortyCallFactory.createRecord(args, params))
  }

  /**
   * Calls the makePayment(asset,uint64,string,byte[32],string,address,address)uint64 ABI method.
   *
   * Processes a payment transaction, creating a new transaction record and associated metadata.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The receipt (asset) for the payment transaction.
   */
  public makePayment(args: MethodArgs<'makePayment(asset,uint64,string,byte[32],string,address,address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MortyCallFactory.makePayment(args, params))
  }

  /**
   * Calls the claimPayment(uint64,asset,pay)void ABI method.
   *
   * Handles the payment claim process, verifying the seller's signature and transferring assets to the seller.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimPayment(args: MethodArgs<'claimPayment(uint64,asset,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MortyCallFactory.claimPayment(args, params))
  }

  /**
   * Calls the claimReceipt(uint64,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimReceipt(args: MethodArgs<'claimReceipt(uint64,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MortyCallFactory.claimReceipt(args, params))
  }

  /**
   * Calls the getLastSubscription(byte[32])uint64[2] ABI method.
   *
   * Retrieves the current subscription period for a given account.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The subscription period [startDate, endDate].
   */
  public getLastSubscription(args: MethodArgs<'getLastSubscription(byte[32])uint64[2]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MortyCallFactory.getLastSubscription(args, params))
  }

  /**
   * Calls the getReceipt(uint64)uint64 ABI method.
   *
   * Retrieves the receipt (asset) associated with a given transaction ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The receipt (asset) for the specified transaction.
   */
  public getReceipt(args: MethodArgs<'getReceipt(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MortyCallFactory.getReceipt(args, params))
  }

  /**
   * Calls the getVault(uint64)uint64 ABI method.
   *
   * Retrieves the vault (asset) associated with a given transaction ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The vault (asset) for the specified transaction.
   */
  public getVault(args: MethodArgs<'getVault(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MortyCallFactory.getVault(args, params))
  }

  /**
   * Calls the getRecordReference(uint64,uint64,string)byte[32] ABI method.
   *
   * Generates a unique record reference based on start and end timestamps and a reference string.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The unique reference for the seller's record.
   */
  public getRecordReference(args: MethodArgs<'getRecordReference(uint64,uint64,string)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MortyCallFactory.getRecordReference(args, params))
  }

  /**
   * Calls the getMyTxnIDs(byte[32])uint64[] ABI method.
   *
   * Retrieves transaction IDs associated with a specific record reference.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: An array of transaction IDs associated with the specified record reference.
   */
  public getMyTxnIDs(args: MethodArgs<'getMyTxnIDs(byte[32])uint64[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MortyCallFactory.getMyTxnIDs(args, params))
  }

  /**
   * Calls the getTxnInfo(uint64)(string,uint64,uint64) ABI method.
   *
   * Retrieves transaction information including description, status, and round index for a given transaction ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Transaction information object{description, status, rIdx}.
   */
  public getTxnInfo(args: MethodArgs<'getTxnInfo(uint64)(string,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MortyCallFactory.getTxnInfo(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Morty['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get TxnIDx() {
        return MortyClient.getIntegerState(state, 'TxnIDx')
      },
    }
  }

  public compose(): MortyComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      subscribe(args: MethodArgs<'subscribe(byte[32])uint64[2]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.subscribe(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createRecord(args: MethodArgs<'createRecord(byte[32],string,asset)byte[32]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createRecord(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      makePayment(args: MethodArgs<'makePayment(asset,uint64,string,byte[32],string,address,address)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.makePayment(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimPayment(args: MethodArgs<'claimPayment(uint64,asset,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimPayment(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimReceipt(args: MethodArgs<'claimReceipt(uint64,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimReceipt(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getLastSubscription(args: MethodArgs<'getLastSubscription(byte[32])uint64[2]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getLastSubscription(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getReceipt(args: MethodArgs<'getReceipt(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getReceipt(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getVault(args: MethodArgs<'getVault(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVault(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getRecordReference(args: MethodArgs<'getRecordReference(uint64,uint64,string)byte[32]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getRecordReference(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getMyTxnIDs(args: MethodArgs<'getMyTxnIDs(byte[32])uint64[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getMyTxnIDs(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getTxnInfo(args: MethodArgs<'getTxnInfo(uint64)(string,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getTxnInfo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as MortyComposer
  }
}
export type MortyComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the subscribe(byte[32])uint64[2] ABI method.
   *
   * Allows an account to subscribe, setting a subscription period and charging money after the free 1 month period.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  subscribe(args: MethodArgs<'subscribe(byte[32])uint64[2]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MortyComposer<[...TReturns, MethodReturn<'subscribe(byte[32])uint64[2]'>]>

  /**
   * Calls the createRecord(byte[32],string,asset)byte[32] ABI method.
   *
   * Creates a unique seller record based on the account, reference, and asset information.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createRecord(args: MethodArgs<'createRecord(byte[32],string,asset)byte[32]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MortyComposer<[...TReturns, MethodReturn<'createRecord(byte[32],string,asset)byte[32]'>]>

  /**
   * Calls the makePayment(asset,uint64,string,byte[32],string,address,address)uint64 ABI method.
   *
   * Processes a payment transaction, creating a new transaction record and associated metadata.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makePayment(args: MethodArgs<'makePayment(asset,uint64,string,byte[32],string,address,address)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MortyComposer<[...TReturns, MethodReturn<'makePayment(asset,uint64,string,byte[32],string,address,address)uint64'>]>

  /**
   * Calls the claimPayment(uint64,asset,pay)void ABI method.
   *
   * Handles the payment claim process, verifying the seller's signature and transferring assets to the seller.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimPayment(args: MethodArgs<'claimPayment(uint64,asset,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MortyComposer<[...TReturns, MethodReturn<'claimPayment(uint64,asset,pay)void'>]>

  /**
   * Calls the claimReceipt(uint64,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimReceipt(args: MethodArgs<'claimReceipt(uint64,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MortyComposer<[...TReturns, MethodReturn<'claimReceipt(uint64,asset)void'>]>

  /**
   * Calls the getLastSubscription(byte[32])uint64[2] ABI method.
   *
   * Retrieves the current subscription period for a given account.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLastSubscription(args: MethodArgs<'getLastSubscription(byte[32])uint64[2]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MortyComposer<[...TReturns, MethodReturn<'getLastSubscription(byte[32])uint64[2]'>]>

  /**
   * Calls the getReceipt(uint64)uint64 ABI method.
   *
   * Retrieves the receipt (asset) associated with a given transaction ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getReceipt(args: MethodArgs<'getReceipt(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MortyComposer<[...TReturns, MethodReturn<'getReceipt(uint64)uint64'>]>

  /**
   * Calls the getVault(uint64)uint64 ABI method.
   *
   * Retrieves the vault (asset) associated with a given transaction ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVault(args: MethodArgs<'getVault(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MortyComposer<[...TReturns, MethodReturn<'getVault(uint64)uint64'>]>

  /**
   * Calls the getRecordReference(uint64,uint64,string)byte[32] ABI method.
   *
   * Generates a unique record reference based on start and end timestamps and a reference string.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getRecordReference(args: MethodArgs<'getRecordReference(uint64,uint64,string)byte[32]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MortyComposer<[...TReturns, MethodReturn<'getRecordReference(uint64,uint64,string)byte[32]'>]>

  /**
   * Calls the getMyTxnIDs(byte[32])uint64[] ABI method.
   *
   * Retrieves transaction IDs associated with a specific record reference.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMyTxnIDs(args: MethodArgs<'getMyTxnIDs(byte[32])uint64[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MortyComposer<[...TReturns, MethodReturn<'getMyTxnIDs(byte[32])uint64[]'>]>

  /**
   * Calls the getTxnInfo(uint64)(string,uint64,uint64) ABI method.
   *
   * Retrieves transaction information including description, status, and round index for a given transaction ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTxnInfo(args: MethodArgs<'getTxnInfo(uint64)(string,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MortyComposer<[...TReturns, MethodReturn<'getTxnInfo(uint64)(string,uint64,uint64)'>]>

  /**
   * Makes a clear_state call to an existing instance of the Morty smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): MortyComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): MortyComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<MortyComposerResults<TReturns>>
}
export type MortyComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
